
name: Continuous Integration

on:
  release:
    types: [ published ]
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

env:
  VERSION: ${{ github.event.release.tag_name || '0,0,0' }}

permissions:
  contents: read

jobs:
  build_and_test:
    runs-on: ubuntu-22.04

    strategy:
      matrix:
        target: [ win64 ] # linux64

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: "true"

    - name: Setup
      run: sudo ./build_and_test/10-setup.sh ${{ matrix.target }} "$VERSION"
      
    - name: Libopenh264
      run: sudo ./build_and_test/20-libopenh264.sh ${{ matrix.target }} "$VERSION"
      
    - name: Zlib
      run: sudo ./build_and_test/20-zlib.sh ${{ matrix.target }} "$VERSION"
      
    - name: FFmpeg
      run: sudo ./build_and_test/60-ffmpeg.sh ${{ matrix.target }} "$VERSION"
      
    - name: Test
      run: sudo ./build_and_test/70-test.sh ${{ matrix.target }} "$VERSION"

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: build
        path: ./artifacts

  nuget:
    runs-on: ubuntu-22.04
    
    needs: [ build_and_test ]

    steps:

    - name: Checkout
      uses: actions/checkout@v4

    - name: Download Artifact
      uses: actions/download-artifact@v4
      with:
        name: build

    - name: Setup
      run: sudo ./nuget/10-setup.sh "$VERSION"

    - name: Nuget
      run: sudo ./nuget/90-nuget.sh "$VERSION"

    # - name: Create Release
    #   if: ${{ github.event_name == 'release' }}
    #   id: create_release
    #   uses: actions/create-release@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     tag_name: ${{ github.ref }}
    #     release_name: Release ${{ github.ref }}
    #     body: |
    #       Changes in this Release
    #       - First Change
    #       - Second Change
    #     draft: false
    #     prerelease: false

    - name: Upload Release Asset
      if: ${{ github.event_name == 'release' }}
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./my-artifact.zip
        asset_name: my-artifact.zip
        asset_content_type: application/zip

